#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -e
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-16" ]; then
	echo "Need heroku-16 stack"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
: ${NODE_VERSION:="6.3.1"}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies
source $BP_DIR/lib/helpers

export_env_dir ${ENV_DIR}

# Create Cache Directory
mkdir -p ${CACHE_DIR}


if [[ -n $(find ${BUILD_DIR} -type f -iname package.json -o -iname bower.json) ]]
then
	echo "Install Node"
	NODE_PATH=`mktemp -d`
	curl -SL https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz -Ls  | tar xz -C ${NODE_PATH}
	
	export PATH="${NODE_PATH}/node-v${NODE_VERSION}-linux-x64/bin:${PATH}"
	
	echo $PATH
	node --version
	echo "Install bower"
	if ! hash bower 2>/dev/null; then
		npm install -g bower
	fi
	
	echo "Install gulp"
	if ! hash gulp 2>/dev/null; then
		npm install -g gulp-cli
	fi
fi

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/


export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

echo "Installing the dependencies"
apt_install libunwind8 gettext

echo "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR

export PATH="/app/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"
if [ -n "$NODE_PATH" ]; then
	export PATH="${BUILD_DIR}/node_modules/.bin:${PATH}"
fi

cd $BUILD_DIR
dotnet --info

if [ -z ${PROJECT_FILE:-} ]; then
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
fi
if [ -z ${PROJECT_NAME:-} ]; then
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi
echo "publish ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/heroku_output --configuration Release --runtime linux-x64
cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ASPNETCORE_URLS='http://+:\$PORT' dotnet "./${PROJECT_NAME}.dll"
EOT
